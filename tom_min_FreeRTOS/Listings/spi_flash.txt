; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\spi_flash.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\spi_flash.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\Libraries\CMSIS\CM3\CoreSupport -I.\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm -I.\Libraries\STM32F10x_StdPeriph_Driver\inc -I.\main -I.\FreeRTOS\include -I.\FreeRTOS\portable\RVDS\ARM_CM3 -I.\User -I.\User\include -I.\fatfs -I.\Utilities\STM32_EVAL -I.\Utilities\STM32_EVAL\Common -I.\Utilities\STM32_EVAL\STM3210E_EVAL -I.\User\SPI_FLASH -I.\User\hal -I.\RTE\_Target_1 -I"D:\program files (x86)\keil5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include" -I"D:\program files (x86)\keil5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=523 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DUSE_STM3210E_EVAL --omf_browse=.\objects\spi_flash.crf User\SPI_FLASH\spi_flash.c]
                          THUMB

                          AREA ||i.sFLASH_DeInit||, CODE, READONLY, ALIGN=1

                  sFLASH_DeInit PROC
;;;86       */
;;;87     void sFLASH_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;88     {
;;;89       sFLASH_LowLevel_DeInit();
000002  f7fffffe          BL       sFLASH_LowLevel_DeInit
;;;90     }
000006  bd10              POP      {r4,pc}
;;;91     
                          ENDP


                          AREA ||i.sFLASH_EraseBulk||, CODE, READONLY, ALIGN=2

                  sFLASH_EraseBulk PROC
;;;166      */
;;;167    void sFLASH_EraseBulk(void)
000000  b510              PUSH     {r4,lr}
;;;168    {
;;;169      /*!< Send write enable instruction */
;;;170      sFLASH_WriteEnable();
000002  f7fffffe          BL       sFLASH_WriteEnable
;;;171    
;;;172      /*!< Bulk Erase */
;;;173      /*!< Select the FLASH: Chip Select low */
;;;174      sFLASH_CS_LOW();
000006  2110              MOVS     r1,#0x10
000008  4806              LDR      r0,|L2.36|
00000a  f7fffffe          BL       GPIO_ResetBits
;;;175      /*!< Send Bulk Erase instruction  */
;;;176      sFLASH_SendByte(sFLASH_CMD_BE);
00000e  20c7              MOVS     r0,#0xc7
000010  f7fffffe          BL       sFLASH_SendByte
;;;177      /*!< Deselect the FLASH: Chip Select high */
;;;178      sFLASH_CS_HIGH();
000014  2110              MOVS     r1,#0x10
000016  4803              LDR      r0,|L2.36|
000018  f7fffffe          BL       GPIO_SetBits
;;;179    
;;;180      /*!< Wait the end of Flash writing */
;;;181      sFLASH_WaitForWriteEnd();
00001c  f7fffffe          BL       sFLASH_WaitForWriteEnd
;;;182    }
000020  bd10              POP      {r4,pc}
;;;183    
                          ENDP

000022  0000              DCW      0x0000
                  |L2.36|
                          DCD      0x40010800

                          AREA ||i.sFLASH_EraseSector||, CODE, READONLY, ALIGN=2

                  sFLASH_EraseSector PROC
;;;138      */
;;;139    void sFLASH_EraseSector(uint32_t SectorAddr)
000000  b510              PUSH     {r4,lr}
;;;140    {
000002  4604              MOV      r4,r0
;;;141      /*!< Send write enable instruction */
;;;142      sFLASH_WriteEnable();
000004  f7fffffe          BL       sFLASH_WriteEnable
;;;143    
;;;144      /*!< Sector Erase */
;;;145      /*!< Select the FLASH: Chip Select low */
;;;146      sFLASH_CS_LOW();
000008  2110              MOVS     r1,#0x10
00000a  480c              LDR      r0,|L3.60|
00000c  f7fffffe          BL       GPIO_ResetBits
;;;147      /*!< Send Sector Erase instruction */
;;;148      sFLASH_SendByte(sFLASH_CMD_SE);
000010  2020              MOVS     r0,#0x20
000012  f7fffffe          BL       sFLASH_SendByte
;;;149      /*!< Send SectorAddr high nibble address byte */
;;;150      sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
000016  f3c44007          UBFX     r0,r4,#16,#8
00001a  f7fffffe          BL       sFLASH_SendByte
;;;151      /*!< Send SectorAddr medium nibble address byte */
;;;152      sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
00001e  f3c42007          UBFX     r0,r4,#8,#8
000022  f7fffffe          BL       sFLASH_SendByte
;;;153      /*!< Send SectorAddr low nibble address byte */
;;;154      sFLASH_SendByte(SectorAddr & 0xFF);
000026  b2e0              UXTB     r0,r4
000028  f7fffffe          BL       sFLASH_SendByte
;;;155      /*!< Deselect the FLASH: Chip Select high */
;;;156      sFLASH_CS_HIGH();
00002c  2110              MOVS     r1,#0x10
00002e  4803              LDR      r0,|L3.60|
000030  f7fffffe          BL       GPIO_SetBits
;;;157    
;;;158      /*!< Wait the end of Flash writing */
;;;159      sFLASH_WaitForWriteEnd();
000034  f7fffffe          BL       sFLASH_WaitForWriteEnd
;;;160    }
000038  bd10              POP      {r4,pc}
;;;161    
                          ENDP

00003a  0000              DCW      0x0000
                  |L3.60|
                          DCD      0x40010800

                          AREA ||i.sFLASH_Init||, CODE, READONLY, ALIGN=2

                  sFLASH_Init PROC
;;;96       */
;;;97     void sFLASH_Init(void)
000000  b500              PUSH     {lr}
;;;98     {
000002  b087              SUB      sp,sp,#0x1c
;;;99     	GPIO_InitTypeDef GPIO_InitStructure;
;;;100    	SPI_InitTypeDef  SPI_InitStructure;
;;;101    
;;;102    	//要不要加复用时钟,前面串口已经打开了，难怪不用开
;;;103    	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_SPI1,ENABLE);
;;;104    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_SPI1|RCC_APB2Periph_AFIO,ENABLE);
000004  2101              MOVS     r1,#1
000006  f2410005          MOV      r0,#0x1005
00000a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;105    	
;;;106    	GPIO_InitStructure.GPIO_Pin = sFLASH_CS_PIN;
00000e  2010              MOVS     r0,#0x10
000010  f8ad0018          STRH     r0,[sp,#0x18]
;;;107    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000014  f88d001b          STRB     r0,[sp,#0x1b]
;;;108    	GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
000018  2003              MOVS     r0,#3
00001a  f88d001a          STRB     r0,[sp,#0x1a]
;;;109    	GPIO_Init(sFLASH_CS_GPIO_PORT, &GPIO_InitStructure);
00001e  a906              ADD      r1,sp,#0x18
000020  481e              LDR      r0,|L4.156|
000022  f7fffffe          BL       GPIO_Init
;;;110    	
;;;111    	//GPIO_SetBits(sFLASH_CS_GPIO_PORT,sFLASH_CS_PIN);
;;;112    	sFLASH_CS_HIGH();
000026  2110              MOVS     r1,#0x10
000028  481c              LDR      r0,|L4.156|
00002a  f7fffffe          BL       GPIO_SetBits
;;;113    
;;;114    	GPIO_InitStructure.GPIO_Pin = sFLASH_SPI_SCK_PIN | sFLASH_SPI_MISO_PIN | sFLASH_SPI_MOSI_PIN;
00002e  20e0              MOVS     r0,#0xe0
000030  f8ad0018          STRH     r0,[sp,#0x18]
;;;115    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;	//复用推挽输出
000034  2018              MOVS     r0,#0x18
000036  f88d001b          STRB     r0,[sp,#0x1b]
;;;116    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00003a  2003              MOVS     r0,#3
00003c  f88d001a          STRB     r0,[sp,#0x1a]
;;;117    	GPIO_Init(GPIOA, &GPIO_InitStructure);
000040  a906              ADD      r1,sp,#0x18
000042  4816              LDR      r0,|L4.156|
000044  f7fffffe          BL       GPIO_Init
;;;118    	GPIO_SetBits(GPIOA,sFLASH_SPI_SCK_PIN|sFLASH_SPI_MISO_PIN|sFLASH_SPI_MOSI_PIN);
000048  21e0              MOVS     r1,#0xe0
00004a  4814              LDR      r0,|L4.156|
00004c  f7fffffe          BL       GPIO_SetBits
;;;119    
;;;120    	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000050  2000              MOVS     r0,#0
000052  f8ad0004          STRH     r0,[sp,#4]
;;;121    	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;	
000056  f44f7082          MOV      r0,#0x104
00005a  f8ad0006          STRH     r0,[sp,#6]
;;;122    	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;	
00005e  2000              MOVS     r0,#0
000060  f8ad0008          STRH     r0,[sp,#8]
;;;123    	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;	
000064  2002              MOVS     r0,#2
000066  f8ad000a          STRH     r0,[sp,#0xa]
;;;124    	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;	
00006a  2001              MOVS     r0,#1
00006c  f8ad000c          STRH     r0,[sp,#0xc]
;;;125    	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;	
000070  0240              LSLS     r0,r0,#9
000072  f8ad000e          STRH     r0,[sp,#0xe]
;;;126    	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4;
000076  2008              MOVS     r0,#8
000078  f8ad0010          STRH     r0,[sp,#0x10]
;;;127    	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
00007c  2000              MOVS     r0,#0
00007e  f8ad0012          STRH     r0,[sp,#0x12]
;;;128    	SPI_InitStructure.SPI_CRCPolynomial = 7;
000082  2007              MOVS     r0,#7
000084  f8ad0014          STRH     r0,[sp,#0x14]
;;;129    	
;;;130    	SPI_Init(sFLASH_SPI, &SPI_InitStructure);
000088  a901              ADD      r1,sp,#4
00008a  4805              LDR      r0,|L4.160|
00008c  f7fffffe          BL       SPI_Init
;;;131    	SPI_Cmd(sFLASH_SPI, ENABLE);
000090  2101              MOVS     r1,#1
000092  4803              LDR      r0,|L4.160|
000094  f7fffffe          BL       SPI_Cmd
;;;132    }
000098  b007              ADD      sp,sp,#0x1c
00009a  bd00              POP      {pc}
;;;133    
                          ENDP

                  |L4.156|
                          DCD      0x40010800
                  |L4.160|
                          DCD      0x40013000

                          AREA ||i.sFLASH_ReadBuffer||, CODE, READONLY, ALIGN=2

                  sFLASH_ReadBuffer PROC
;;;313      */
;;;314    void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
000000  b570              PUSH     {r4-r6,lr}
;;;315    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;316      /*!< Select the FLASH: Chip Select low */
;;;317      sFLASH_CS_LOW();
000008  2110              MOVS     r1,#0x10
00000a  4810              LDR      r0,|L5.76|
00000c  f7fffffe          BL       GPIO_ResetBits
;;;318    
;;;319      /*!< Send "Read from Memory " instruction */
;;;320      sFLASH_SendByte(sFLASH_CMD_READ);
000010  2003              MOVS     r0,#3
000012  f7fffffe          BL       sFLASH_SendByte
;;;321    
;;;322      /*!< Send ReadAddr high nibble address byte to read from */
;;;323      sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
000016  f3c44007          UBFX     r0,r4,#16,#8
00001a  f7fffffe          BL       sFLASH_SendByte
;;;324      /*!< Send ReadAddr medium nibble address byte to read from */
;;;325      sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
00001e  f3c42007          UBFX     r0,r4,#8,#8
000022  f7fffffe          BL       sFLASH_SendByte
;;;326      /*!< Send ReadAddr low nibble address byte to read from */
;;;327      sFLASH_SendByte(ReadAddr & 0xFF);
000026  b2e0              UXTB     r0,r4
000028  f7fffffe          BL       sFLASH_SendByte
;;;328    
;;;329      while (NumByteToRead--) /*!< while there is data to be read */
00002c  e004              B        |L5.56|
                  |L5.46|
;;;330      {
;;;331        /*!< Read a byte from the FLASH */
;;;332        *pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
00002e  20a5              MOVS     r0,#0xa5
000030  f7fffffe          BL       sFLASH_SendByte
000034  7028              STRB     r0,[r5,#0]
;;;333        /*!< Point to the next location where the byte read will be saved */
;;;334        pBuffer++;
000036  1c6d              ADDS     r5,r5,#1
                  |L5.56|
000038  1e30              SUBS     r0,r6,#0              ;329
00003a  f1a60101          SUB      r1,r6,#1              ;329
00003e  b28e              UXTH     r6,r1                 ;329
000040  d1f5              BNE      |L5.46|
;;;335      }
;;;336    
;;;337      /*!< Deselect the FLASH: Chip Select high */
;;;338      sFLASH_CS_HIGH();
000042  2110              MOVS     r1,#0x10
000044  4801              LDR      r0,|L5.76|
000046  f7fffffe          BL       GPIO_SetBits
;;;339    }
00004a  bd70              POP      {r4-r6,pc}
;;;340    
                          ENDP

                  |L5.76|
                          DCD      0x40010800

                          AREA ||i.sFLASH_ReadByte||, CODE, READONLY, ALIGN=1

                  sFLASH_ReadByte PROC
;;;408      */
;;;409    uint8_t sFLASH_ReadByte(void)
000000  b510              PUSH     {r4,lr}
;;;410    {
;;;411      return (sFLASH_SendByte(sFLASH_DUMMY_BYTE));
000002  20a5              MOVS     r0,#0xa5
000004  f7fffffe          BL       sFLASH_SendByte
;;;412    }
000008  bd10              POP      {r4,pc}
;;;413    
                          ENDP


                          AREA ||i.sFLASH_ReadID||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_s
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                  sFLASH_ReadID PROC
;;;345      */
;;;346    uint32_t sFLASH_ReadID(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;347    {
;;;348    	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
000004  2400              MOVS     r4,#0
000006  2500              MOVS     r5,#0
000008  2600              MOVS     r6,#0
00000a  2700              MOVS     r7,#0
;;;349    
;;;350    	/*!< Select the FLASH: Chip Select low */
;;;351    	sFLASH_CS_LOW();
00000c  2110              MOVS     r1,#0x10
00000e  4811              LDR      r0,|L7.84|
000010  f7fffffe          BL       GPIO_ResetBits
;;;352    
;;;353    	/*!< Send "RDID " instruction */
;;;354    	sFLASH_SendByte(0x9F);
000014  209f              MOVS     r0,#0x9f
000016  f7fffffe          BL       sFLASH_SendByte
;;;355    
;;;356    	//加个延时最好
;;;357    
;;;358    	/*!< Read a byte from the FLASH */
;;;359    	Temp0 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
00001a  20a5              MOVS     r0,#0xa5
00001c  f7fffffe          BL       sFLASH_SendByte
000020  4605              MOV      r5,r0
;;;360    
;;;361    	/*!< Read a byte from the FLASH */
;;;362    	Temp1 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
000022  20a5              MOVS     r0,#0xa5
000024  f7fffffe          BL       sFLASH_SendByte
000028  4606              MOV      r6,r0
;;;363    
;;;364    	/*!< Read a byte from the FLASH */
;;;365    	Temp2 = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
00002a  20a5              MOVS     r0,#0xa5
00002c  f7fffffe          BL       sFLASH_SendByte
000030  4607              MOV      r7,r0
;;;366    
;;;367    	/*!< Deselect the FLASH: Chip Select high */
;;;368    	sFLASH_CS_HIGH();
000032  2110              MOVS     r1,#0x10
000034  4807              LDR      r0,|L7.84|
000036  f7fffffe          BL       GPIO_SetBits
;;;369    
;;;370    	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
00003a  0428              LSLS     r0,r5,#16
00003c  ea402006          ORR      r0,r0,r6,LSL #8
000040  ea400407          ORR      r4,r0,r7
;;;371    
;;;372    	printf("[%s]: 0x%06X\r\n",__func__,Temp);
000044  4622              MOV      r2,r4
000046  4904              LDR      r1,|L7.88|
000048  a004              ADR      r0,|L7.92|
00004a  f7fffffe          BL       __2printf
;;;373    	return Temp;
00004e  4620              MOV      r0,r4
;;;374    }
000050  e8bd81f0          POP      {r4-r8,pc}
;;;375    
                          ENDP

                  |L7.84|
                          DCD      0x40010800
                  |L7.88|
                          DCD      __func__
                  |L7.92|
00005c  5b25735d          DCB      "[%s]: 0x%06X\r\n",0
000060  3a203078
000064  25303658
000068  0d0a00  
00006b  00                DCB      0

                          AREA ||i.sFLASH_SendByte||, CODE, READONLY, ALIGN=2

                  sFLASH_SendByte PROC
;;;419      */
;;;420    uint8_t sFLASH_SendByte(uint8_t byte)
000000  b510              PUSH     {r4,lr}
;;;421    {
000002  4604              MOV      r4,r0
;;;422      /*!< Loop while DR register in not emplty */
;;;423      while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_TXE) == RESET);
000004  bf00              NOP      
                  |L8.6|
000006  2102              MOVS     r1,#2
000008  480a              LDR      r0,|L8.52|
00000a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L8.6|
;;;424    
;;;425      /*!< Send byte through the SPI1 peripheral */
;;;426      SPI_I2S_SendData(sFLASH_SPI, byte);
000012  4621              MOV      r1,r4
000014  4807              LDR      r0,|L8.52|
000016  f7fffffe          BL       SPI_I2S_SendData
;;;427    
;;;428      /*!< Wait to receive a byte */
;;;429      while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_RXNE) == RESET);
00001a  bf00              NOP      
                  |L8.28|
00001c  2101              MOVS     r1,#1
00001e  4805              LDR      r0,|L8.52|
000020  f7fffffe          BL       SPI_I2S_GetFlagStatus
000024  2800              CMP      r0,#0
000026  d0f9              BEQ      |L8.28|
;;;430    
;;;431      /*!< Return the byte read from the SPI bus */
;;;432      return SPI_I2S_ReceiveData(sFLASH_SPI);
000028  4802              LDR      r0,|L8.52|
00002a  f7fffffe          BL       SPI_I2S_ReceiveData
00002e  b2c0              UXTB     r0,r0
;;;433    }
000030  bd10              POP      {r4,pc}
;;;434    
                          ENDP

000032  0000              DCW      0x0000
                  |L8.52|
                          DCD      0x40013000

                          AREA ||i.sFLASH_SendHalfWord||, CODE, READONLY, ALIGN=2

                  sFLASH_SendHalfWord PROC
;;;440      */
;;;441    uint16_t sFLASH_SendHalfWord(uint16_t HalfWord)
000000  b510              PUSH     {r4,lr}
;;;442    {
000002  4604              MOV      r4,r0
;;;443      /*!< Loop while DR register in not emplty */
;;;444      while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_TXE) == RESET);
000004  bf00              NOP      
                  |L9.6|
000006  2102              MOVS     r1,#2
000008  4809              LDR      r0,|L9.48|
00000a  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L9.6|
;;;445    
;;;446      /*!< Send Half Word through the sFLASH peripheral */
;;;447      SPI_I2S_SendData(sFLASH_SPI, HalfWord);
000012  4621              MOV      r1,r4
000014  4806              LDR      r0,|L9.48|
000016  f7fffffe          BL       SPI_I2S_SendData
;;;448    
;;;449      /*!< Wait to receive a Half Word */
;;;450      while (SPI_I2S_GetFlagStatus(sFLASH_SPI, SPI_I2S_FLAG_RXNE) == RESET);
00001a  bf00              NOP      
                  |L9.28|
00001c  2101              MOVS     r1,#1
00001e  4804              LDR      r0,|L9.48|
000020  f7fffffe          BL       SPI_I2S_GetFlagStatus
000024  2800              CMP      r0,#0
000026  d0f9              BEQ      |L9.28|
;;;451    
;;;452      /*!< Return the Half Word read from the SPI bus */
;;;453      return SPI_I2S_ReceiveData(sFLASH_SPI);
000028  4801              LDR      r0,|L9.48|
00002a  f7fffffe          BL       SPI_I2S_ReceiveData
;;;454    }
00002e  bd10              POP      {r4,pc}
;;;455    
                          ENDP

                  |L9.48|
                          DCD      0x40013000

                          AREA ||i.sFLASH_StartReadSequence||, CODE, READONLY, ALIGN=2

                  sFLASH_StartReadSequence PROC
;;;384      */
;;;385    void sFLASH_StartReadSequence(uint32_t ReadAddr)
000000  b510              PUSH     {r4,lr}
;;;386    {
000002  4604              MOV      r4,r0
;;;387      /*!< Select the FLASH: Chip Select low */
;;;388      sFLASH_CS_LOW();
000004  2110              MOVS     r1,#0x10
000006  4809              LDR      r0,|L10.44|
000008  f7fffffe          BL       GPIO_ResetBits
;;;389    
;;;390      /*!< Send "Read from Memory " instruction */
;;;391      sFLASH_SendByte(sFLASH_CMD_READ);
00000c  2003              MOVS     r0,#3
00000e  f7fffffe          BL       sFLASH_SendByte
;;;392    
;;;393      /*!< Send the 24-bit address of the address to read from -------------------*/
;;;394      /*!< Send ReadAddr high nibble address byte */
;;;395      sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
000012  f3c44007          UBFX     r0,r4,#16,#8
000016  f7fffffe          BL       sFLASH_SendByte
;;;396      /*!< Send ReadAddr medium nibble address byte */
;;;397      sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
00001a  f3c42007          UBFX     r0,r4,#8,#8
00001e  f7fffffe          BL       sFLASH_SendByte
;;;398      /*!< Send ReadAddr low nibble address byte */
;;;399      sFLASH_SendByte(ReadAddr & 0xFF);
000022  b2e0              UXTB     r0,r4
000024  f7fffffe          BL       sFLASH_SendByte
;;;400    }
000028  bd10              POP      {r4,pc}
;;;401    
                          ENDP

00002a  0000              DCW      0x0000
                  |L10.44|
                          DCD      0x40010800

                          AREA ||i.sFLASH_WaitForWriteEnd||, CODE, READONLY, ALIGN=2

                  sFLASH_WaitForWriteEnd PROC
;;;478      */
;;;479    void sFLASH_WaitForWriteEnd(void)
000000  b510              PUSH     {r4,lr}
;;;480    {
;;;481      uint8_t flashstatus = 0;
000002  2400              MOVS     r4,#0
;;;482    
;;;483      /*!< Select the FLASH: Chip Select low */
;;;484      sFLASH_CS_LOW();
000004  2110              MOVS     r1,#0x10
000006  480a              LDR      r0,|L11.48|
000008  f7fffffe          BL       GPIO_ResetBits
;;;485    
;;;486      /*!< Send "Read Status Register" instruction */
;;;487      sFLASH_SendByte(sFLASH_CMD_RDSR);
00000c  2005              MOVS     r0,#5
00000e  f7fffffe          BL       sFLASH_SendByte
;;;488    
;;;489      /*!< Loop as long as the memory is busy with a write cycle */
;;;490      do
000012  bf00              NOP      
                  |L11.20|
;;;491      {
;;;492        /*!< Send a dummy byte to generate the clock needed by the FLASH
;;;493        and put the value of the status register in FLASH_Status variable */
;;;494        flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
000014  20a5              MOVS     r0,#0xa5
000016  f7fffffe          BL       sFLASH_SendByte
00001a  4604              MOV      r4,r0
;;;495    
;;;496      }
;;;497      while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
00001c  f0040001          AND      r0,r4,#1
000020  2800              CMP      r0,#0
000022  d1f7              BNE      |L11.20|
;;;498    
;;;499      /*!< Deselect the FLASH: Chip Select high */
;;;500      sFLASH_CS_HIGH();
000024  2110              MOVS     r1,#0x10
000026  4802              LDR      r0,|L11.48|
000028  f7fffffe          BL       GPIO_SetBits
;;;501    }
00002c  bd10              POP      {r4,pc}
;;;502    
                          ENDP

00002e  0000              DCW      0x0000
                  |L11.48|
                          DCD      0x40010800

                          AREA ||i.sFLASH_WriteBuffer||, CODE, READONLY, ALIGN=1

                  sFLASH_WriteBuffer PROC
;;;235      */
;;;236    void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;237    {
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;238      uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
00000a  f04f0800          MOV      r8,#0
00000e  46c1              MOV      r9,r8
000010  46c2              MOV      r10,r8
000012  2500              MOVS     r5,#0
000014  46ab              MOV      r11,r5
;;;239    
;;;240      Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
000016  f0060aff          AND      r10,r6,#0xff
;;;241      count = sFLASH_SPI_PAGESIZE - Addr;
00001a  f1ca0000          RSB      r0,r10,#0
00001e  b2c5              UXTB     r5,r0
;;;242      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
000020  4620              MOV      r0,r4
000022  17e1              ASRS     r1,r4,#31
000024  eb046111          ADD      r1,r4,r1,LSR #24
000028  f3c12807          UBFX     r8,r1,#8,#8
;;;243      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
00002c  17e1              ASRS     r1,r4,#31
00002e  eb046111          ADD      r1,r4,r1,LSR #24
000032  1209              ASRS     r1,r1,#8
000034  eba42101          SUB      r1,r4,r1,LSL #8
000038  f00109ff          AND      r9,r1,#0xff
;;;244    
;;;245      if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
00003c  f1ba0f00          CMP      r10,#0
000040  d120              BNE      |L12.132|
;;;246      {
;;;247        if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
000042  f1b80f00          CMP      r8,#0
000046  d105              BNE      |L12.84|
;;;248        {
;;;249          sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
000048  4622              MOV      r2,r4
00004a  4631              MOV      r1,r6
00004c  4638              MOV      r0,r7
00004e  f7fffffe          BL       sFLASH_WritePage
000052  e064              B        |L12.286|
                  |L12.84|
;;;250        }
;;;251        else /*!< NumByteToWrite > sFLASH_PAGESIZE */
;;;252        {
;;;253          while (NumOfPage--)
000054  e009              B        |L12.106|
                  |L12.86|
;;;254          {
;;;255            sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
000056  f44f7280          MOV      r2,#0x100
00005a  4631              MOV      r1,r6
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       sFLASH_WritePage
;;;256            WriteAddr +=  sFLASH_SPI_PAGESIZE;
000062  f5067680          ADD      r6,r6,#0x100
;;;257            pBuffer += sFLASH_SPI_PAGESIZE;
000066  f5077780          ADD      r7,r7,#0x100
                  |L12.106|
00006a  f1b80000          SUBS     r0,r8,#0              ;253
00006e  f1a80101          SUB      r1,r8,#1              ;253
000072  f00108ff          AND      r8,r1,#0xff           ;253
000076  d1ee              BNE      |L12.86|
;;;258          }
;;;259    
;;;260          sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
000078  464a              MOV      r2,r9
00007a  4631              MOV      r1,r6
00007c  4638              MOV      r0,r7
00007e  f7fffffe          BL       sFLASH_WritePage
000082  e04c              B        |L12.286|
                  |L12.132|
;;;261        }
;;;262      }
;;;263      else /*!< WriteAddr is not sFLASH_PAGESIZE aligned  */
;;;264      {
;;;265        if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
000084  f1b80f00          CMP      r8,#0
000088  d118              BNE      |L12.188|
;;;266        {
;;;267          if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
00008a  45a9              CMP      r9,r5
00008c  dd10              BLE      |L12.176|
;;;268          {
;;;269            temp = NumOfSingle - count;
00008e  eba90005          SUB      r0,r9,r5
000092  f0000bff          AND      r11,r0,#0xff
;;;270    
;;;271            sFLASH_WritePage(pBuffer, WriteAddr, count);
000096  462a              MOV      r2,r5
000098  4631              MOV      r1,r6
00009a  4638              MOV      r0,r7
00009c  f7fffffe          BL       sFLASH_WritePage
;;;272            WriteAddr +=  count;
0000a0  442e              ADD      r6,r6,r5
;;;273            pBuffer += count;
0000a2  442f              ADD      r7,r7,r5
;;;274    
;;;275            sFLASH_WritePage(pBuffer, WriteAddr, temp);
0000a4  465a              MOV      r2,r11
0000a6  4631              MOV      r1,r6
0000a8  4638              MOV      r0,r7
0000aa  f7fffffe          BL       sFLASH_WritePage
0000ae  e036              B        |L12.286|
                  |L12.176|
;;;276          }
;;;277          else
;;;278          {
;;;279            sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
0000b0  4622              MOV      r2,r4
0000b2  4631              MOV      r1,r6
0000b4  4638              MOV      r0,r7
0000b6  f7fffffe          BL       sFLASH_WritePage
0000ba  e030              B        |L12.286|
                  |L12.188|
;;;280          }
;;;281        }
;;;282        else /*!< NumByteToWrite > sFLASH_PAGESIZE */
;;;283        {
;;;284          NumByteToWrite -= count;
0000bc  1b60              SUBS     r0,r4,r5
0000be  b284              UXTH     r4,r0
;;;285          NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
0000c0  4620              MOV      r0,r4
0000c2  17e1              ASRS     r1,r4,#31
0000c4  eb046111          ADD      r1,r4,r1,LSR #24
0000c8  f3c12807          UBFX     r8,r1,#8,#8
;;;286          NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
0000cc  17e1              ASRS     r1,r4,#31
0000ce  eb046111          ADD      r1,r4,r1,LSR #24
0000d2  1209              ASRS     r1,r1,#8
0000d4  eba42101          SUB      r1,r4,r1,LSL #8
0000d8  f00109ff          AND      r9,r1,#0xff
;;;287    
;;;288          sFLASH_WritePage(pBuffer, WriteAddr, count);
0000dc  462a              MOV      r2,r5
0000de  4631              MOV      r1,r6
0000e0  4638              MOV      r0,r7
0000e2  f7fffffe          BL       sFLASH_WritePage
;;;289          WriteAddr +=  count;
0000e6  442e              ADD      r6,r6,r5
;;;290          pBuffer += count;
0000e8  442f              ADD      r7,r7,r5
;;;291    
;;;292          while (NumOfPage--)
0000ea  e009              B        |L12.256|
                  |L12.236|
;;;293          {
;;;294            sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
0000ec  f44f7280          MOV      r2,#0x100
0000f0  4631              MOV      r1,r6
0000f2  4638              MOV      r0,r7
0000f4  f7fffffe          BL       sFLASH_WritePage
;;;295            WriteAddr +=  sFLASH_SPI_PAGESIZE;
0000f8  f5067680          ADD      r6,r6,#0x100
;;;296            pBuffer += sFLASH_SPI_PAGESIZE;
0000fc  f5077780          ADD      r7,r7,#0x100
                  |L12.256|
000100  f1b80000          SUBS     r0,r8,#0              ;292
000104  f1a80101          SUB      r1,r8,#1              ;292
000108  f00108ff          AND      r8,r1,#0xff           ;292
00010c  d1ee              BNE      |L12.236|
;;;297          }
;;;298    
;;;299          if (NumOfSingle != 0)
00010e  f1b90f00          CMP      r9,#0
000112  d004              BEQ      |L12.286|
;;;300          {
;;;301            sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
000114  464a              MOV      r2,r9
000116  4631              MOV      r1,r6
000118  4638              MOV      r0,r7
00011a  f7fffffe          BL       sFLASH_WritePage
                  |L12.286|
;;;302          }
;;;303        }
;;;304      }
;;;305    }
00011e  e8bd9ff0          POP      {r4-r12,pc}
;;;306    
                          ENDP


                          AREA ||i.sFLASH_WriteEnable||, CODE, READONLY, ALIGN=2

                  sFLASH_WriteEnable PROC
;;;460      */
;;;461    void sFLASH_WriteEnable(void)
000000  b510              PUSH     {r4,lr}
;;;462    {
;;;463      /*!< Select the FLASH: Chip Select low */
;;;464      sFLASH_CS_LOW();
000002  2110              MOVS     r1,#0x10
000004  4805              LDR      r0,|L13.28|
000006  f7fffffe          BL       GPIO_ResetBits
;;;465    
;;;466      /*!< Send "Write Enable" instruction */
;;;467      sFLASH_SendByte(sFLASH_CMD_WREN);
00000a  2006              MOVS     r0,#6
00000c  f7fffffe          BL       sFLASH_SendByte
;;;468    
;;;469      /*!< Deselect the FLASH: Chip Select high */
;;;470      sFLASH_CS_HIGH();
000010  2110              MOVS     r1,#0x10
000012  4802              LDR      r0,|L13.28|
000014  f7fffffe          BL       GPIO_SetBits
;;;471    }
000018  bd10              POP      {r4,pc}
;;;472    
                          ENDP

00001a  0000              DCW      0x0000
                  |L13.28|
                          DCD      0x40010800

                          AREA ||i.sFLASH_WritePage||, CODE, READONLY, ALIGN=2

                  sFLASH_WritePage PROC
;;;194      */
;;;195    void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
000000  b570              PUSH     {r4-r6,lr}
;;;196    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;197      /*!< Enable the write access to the FLASH */
;;;198      sFLASH_WriteEnable();
000008  f7fffffe          BL       sFLASH_WriteEnable
;;;199    
;;;200      /*!< Select the FLASH: Chip Select low */
;;;201      sFLASH_CS_LOW();
00000c  2110              MOVS     r1,#0x10
00000e  4811              LDR      r0,|L14.84|
000010  f7fffffe          BL       GPIO_ResetBits
;;;202      /*!< Send "Write to Memory " instruction */
;;;203      sFLASH_SendByte(sFLASH_CMD_WRITE);
000014  2002              MOVS     r0,#2
000016  f7fffffe          BL       sFLASH_SendByte
;;;204      /*!< Send WriteAddr high nibble address byte to write to */
;;;205      sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
00001a  f3c44007          UBFX     r0,r4,#16,#8
00001e  f7fffffe          BL       sFLASH_SendByte
;;;206      /*!< Send WriteAddr medium nibble address byte to write to */
;;;207      sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
000022  f3c42007          UBFX     r0,r4,#8,#8
000026  f7fffffe          BL       sFLASH_SendByte
;;;208      /*!< Send WriteAddr low nibble address byte to write to */
;;;209      sFLASH_SendByte(WriteAddr & 0xFF);
00002a  b2e0              UXTB     r0,r4
00002c  f7fffffe          BL       sFLASH_SendByte
;;;210    
;;;211      /*!< while there is data to be written on the FLASH */
;;;212      while (NumByteToWrite--)
000030  e003              B        |L14.58|
                  |L14.50|
;;;213      {
;;;214        /*!< Send the current byte */
;;;215        sFLASH_SendByte(*pBuffer);
000032  7828              LDRB     r0,[r5,#0]
000034  f7fffffe          BL       sFLASH_SendByte
;;;216        /*!< Point on the next byte to be written */
;;;217        pBuffer++;
000038  1c6d              ADDS     r5,r5,#1
                  |L14.58|
00003a  1e30              SUBS     r0,r6,#0              ;212
00003c  f1a60101          SUB      r1,r6,#1              ;212
000040  b28e              UXTH     r6,r1                 ;212
000042  d1f6              BNE      |L14.50|
;;;218      }
;;;219    
;;;220      /*!< Deselect the FLASH: Chip Select high */
;;;221      sFLASH_CS_HIGH();
000044  2110              MOVS     r1,#0x10
000046  4803              LDR      r0,|L14.84|
000048  f7fffffe          BL       GPIO_SetBits
;;;222    
;;;223      /*!< Wait the end of Flash writing */
;;;224      sFLASH_WaitForWriteEnd();
00004c  f7fffffe          BL       sFLASH_WaitForWriteEnd
;;;225    }
000050  bd70              POP      {r4-r6,pc}
;;;226    
                          ENDP

000052  0000              DCW      0x0000
                  |L14.84|
                          DCD      0x40010800

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __func__
000000  73464c41          DCB      0x73,0x46,0x4c,0x41
000004  53485f52          DCB      0x53,0x48,0x5f,0x52
000008  65616449          DCB      0x65,0x61,0x64,0x49
00000c  4400              DCB      0x44,0x00
